问题描述：
在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
(1) 每次只能移动一个盘子;
(2) 盘子只能从柱子顶端滑出移到下一根柱子;
(3) 盘子只能叠在比它大的盘子上。

请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。
你需要原地修改栈。

示例1:
 输入：A = [2, 1, 0], B = [], C = []
 输出：C = [2, 1, 0]
 
示例2:
输入：A = [1, 0], B = [], C = []
输出：C = [1, 0]
提示:

A中盘子的数目不大于14个。

分析：
n=1：直接将X柱上的盘子移至Z柱
n>1:若能设法将X柱上的前n-1个盘子挪至Y柱，则可先将第n个盘子放到Z柱。之后再将Y柱上的n-1个盘子（按照上述方法）挪至Z柱==》递归


我的代码：
class Solution(object):
    def move(self,n,A,B,C):
        if n==1:
            C.append(A.pop(-1))   是-1不是0！  一定是从后向前拿
        else:
            self.move(n-1,A,C,B)  #此处注意！一定是self.函数调用。此句是将A上的前n-1个盘通过c作为辅助，移至B柱上去。A上只剩第n个盘
            C.append(A.pop(-1))   #将A上仅剩的第n个盘移到C上
            self.move(n-1,B,A,C)   #此处注意！一定是self.函数调用。 此句是将B上的n-1个盘通过A作为辅助，移至C柱上去。
    def hanota(self, A, B, C):
        """
        :type A: List[int]
        :type B: List[int]
        :type C: List[int]
        :rtype: None Do not return anything, modify C in-place instead.
        """
        n=len(A)
        self.move(n,A,B,C)  #此处注意！一定是self.函数调用


纪念一下超小内存消耗：
执行结果：通过
显示详情
执行用时：
24 ms, 在所有 Python 提交中击败了74.02%的用户
内存消耗：
12.6 MB, 在所有 Python 提交中击败了100.00%的用户
