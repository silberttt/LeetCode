class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int max_cnt = amount + 1;
        vector<int> f(max_cnt, max_cnt);

        f[0] = 0;
        for (int i = 1; i <= amount; ++ i)              //从一块钱遍历到amount块钱
            for (int j = 0; j < coins.size(); ++ j)     //i块钱能由哪些硬币组成
                if (coins[j] <= i)                      //当前硬币面值小于i块钱，考虑将它加入
                    f[i] = min(f[i], f[i - coins[j]] + 1);
                    
        return f[amount] > amount ? -1 : f[amount];     //结果若还是初始时的amount + 1则无解
    }
};


背包1
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < coins.size(); i++) { // 遍历物品
            for (int j = coins[i]; j <= amount; j++) { // 遍历背包
                if (dp[j - coins[i]] != INT_MAX) { // 如果dp[j - coins[i]]是初始值则跳过
                    dp[j] = min(dp[j - coins[i]] + 1, dp[j]);
                }
            }
        }
        if (dp[amount] == INT_MAX) return -1;
        return dp[amount];
    }
};

// 背包2
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {  // 遍历背包
            for (int j = 0; j < coins.size(); j++) { // 遍历物品 
                if (i - coins[j] >= 0 && dp[i - coins[j]] != INT_MAX ) {
                    dp[i] = min(dp[i - coins[j]] + 1, dp[i]);
                }
            }
        }
        if (dp[amount] == INT_MAX) return -1;
        return dp[amount];
    }
};



